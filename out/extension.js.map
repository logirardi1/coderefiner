{"version":3,"file":"extension.js","sourceRoot":"/","sources":["extension.ts"],"names":[],"mappings":"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","sourcesContent":["import * as vscode from 'vscode';\nimport * as prettier from 'prettier';\nimport * as cp from 'child_process'; // Para rodar comandos externos\n\n// Inicializar o Sentry\nconst Sentry = require(\"@sentry/node\");\n\nSentry.init({\n  dsn: \"https://dd4fc19e421a540ea60c2beb3109de09@o4508169162063872.ingest.us.sentry.io/4508170204020736\",\n});\n\nexport function activate(context: vscode.ExtensionContext) {\n\n    console.log('Agora, CodeRefine está ativo!');\n\n    let disposable = vscode.commands.registerCommand('extension.formatCode', async () => {\n        const editor = vscode.window.activeTextEditor;\n        if (editor) {\n            const document = editor.document;\n            const text = document.getText();\n            const languageId = document.languageId;\n            const formatted = await formatCode(text, languageId);  // chamada assíncrona com await\n\n            if (typeof formatted === 'string') { // Verificação para garantir que VAI retornar uma string\n                const fullRange = new vscode.Range(\n                    document.positionAt(0),\n                    document.positionAt(document.getText().length)\n                );\n\n                editor.edit(editBuilder => {\n                    editBuilder.replace(fullRange, formatted);\n                });\n            } else {\n                console.error(\"Erro: format result is not a string.\");\n            }\n        }\n    });\n\n    context.subscriptions.push(disposable);\n}\n\nexport function deactivate() {}\n\n// Função principal para formatação de código\nasync function formatCode(text: string, languageId: string): Promise<string> {\n    console.log('Code Refine está formatando...');\n\n    // mapa linguagens para o parser correto (babel foi indexado, não é mais retono de erro)\n    const parserMap: { [key: string]: prettier.LiteralUnion<prettier.BuiltInParserName, string> } = {\n        javascript: 'babel', // certo\n        typescript: 'typescript', // certo\n        css: 'css', // certo\n        scss: 'scss',\n        html: 'html', // certo\n        json: 'json',\n        markdown: 'markdown',\n        php: 'php',        // index do @prettier/plugin-php\n        xml: 'xml'         // index do @prettier/plugin-xml\n    };\n\n    const parser = parserMap[languageId];\n\n    try {\n        if (parser) {\n            // Se a linguagem for suportada pelo Prettier\n            return await prettier.format(text, {  // Tornando o prettier.format assíncrono com await\n                parser: parser,\n                singleQuote: true,\n                trailingComma: 'es5',\n                tabWidth: 2\n            });\n        } else if (languageId === 'python') {\n            return formatWithBlack(text);  // formatação python - black\n        } else if (languageId === 'java') {\n            return formatWithGoogleJavaFormat(text);  // formatação p/ Java com google format\n        } else if (languageId === 'csv') {\n            return formatCSV(text);  // format básico p CSV\n        } else {\n            return text; // retorna o texto sem formatação se a linguagem não for suportada\n        }\n    } catch (error) {\n        console.error('CodeRefine encontrou um erro ao tentar formatar', error);\n        return text; // voltar texto original caso falhe\n    }\n}\n\n// Função para formatar Python com Black usando o venv\nfunction formatWithBlack(text: string): string {\n    try {\n        // AQUI substituir pelo caminho do Black no ambiente virtual (venv)\n        const formatted = cp.execSync('/home/gorgopat/Documentos/GitLorenzo/coderefiner/venv/bin/black -q -', { input: text }).toString();\n        return formatted;\n    } catch (error) {\n        console.error('Houve um erro ao tentar formatar o arquivo Python', error);\n        return text;\n    }\n}\n\n// Função para formatar Java com google-java-format\nfunction formatWithGoogleJavaFormat(text: string): string {\n    try {\n        const formatted = cp.execSync(\n            'java -jar /home/gorgopat/Documentos/GitLorenzo/coderefiner/google-java-format-1.23.0-all-deps.jar -',\n            { input: text }\n        ).toString();\n\n        return formatted;\n    } catch (error) {\n        console.error('Houve um erro ao tentar formatar o arquivo JAVA:', error);\n        return text;\n    }\n}\n\n// Função para formatação básica de CSV\nfunction formatCSV(text: string): string {\n    return text.split('\\n')\n        .map(line => line.trim())\n        .join('\\n');\n}\n"]}